---
title: "Module 8 Fitting"
output: html_document
---

This Quarto file loads the cleaned data and does some exploring.

The code in this file fits some models to the flu data we have.

#### Load packages

```{r}
# Helper packages
library(tidyverse) #for transforming data
library(dplyr)     # for data wrangling
library(tidyr)     # for data wrangling
library(ggplot2)   # for awesome plotting
library(here)      # to set paths for data loading/saving

# Modeling packages
library(tidymodels) #for modeling
library(performance) # to look at model performance

# Model interpretability packages
library(vip)       # variable importance

```

#### 1. Load clean data

```{r}
#Path to data. Note the use of the here() package and not absolute paths
cleandata <- readRDS(here("fluanalysis", "data", "cleandata.rds"))
```

#### 2. Fit a linear model to the continuous outcome (Body temperature) using only the main predictor of interest

Let's set up our model. For linear modeling we'll need to use the linear_reg() and set_engine("lm") commands.

```{r}
lm_model2 <- linear_reg() %>%
  set_engine("lm")
```

Now let's train it to our data

```{r}
lm_fit2 <- lm_model2 %>% 
          fit(BodyTemp ~ RunnyNose, data = cleandata)
lm_fit2
```

Report results using the `glance()` function.

```{r}
glance(lm_fit2)
```

Additional summary data

```{r}
tidy(lm_fit2)
```

Checking the model performance

```{r}
check_model(lm_fit2$fit)
```

#### 3. Fit another linear model to the continuous outcome using all predictors of interest

Let's set up a second model with all predictors. Like before, we'll need to use the linear_reg() and set_engine("lm") commands.

```{r}
lm_model3 <- linear_reg() %>%
  set_engine("lm")
```

Now let's train it to our data

```{r}
lm_fit3 <- lm_model3 %>% 
          fit(BodyTemp ~ ., data = cleandata)
lm_fit3
```

We can again look at results using the `glance()` function.

```{r}
glance(lm_fit3)
```

Additional summary data

```{r}
tidy(lm_fit3)
```

Check model performance

```{r}
check_model(lm_fit3$fit)
```

#### 4. Compare the model results for the model with just the main predictor and all predictors

Comparison of `lm_fit2` and `lm_fit3` based on performance of the models

```{r}
compare_performance(lm_fit2,lm_fit3)
```

#### 5. Fit a logistic model to the categorical outcome (Nausea) using only the main predictor of interest

For logistic modeling, we will need to use logistic_reg() and set_engine("glm").

```{r}
glm_model5 <- logistic_reg() %>%
  set_engine("glm")
```

Now let's train it to our data

```{r}
glm_fit5 <- glm_model5 %>% 
          fit(Nausea ~ RunnyNose, data = cleandata)
glm_fit5
```

Report results using the `glance()` function.

```{r}
glance(glm_fit5)
```

Additional summary data

```{r}
tidy(glm_fit5)
```

Check model performance

```{r}
check_model(glm_fit5$fit)
```

#### 6. Fit another logistic model to the categorical outcome using all (important) predictors of interest

Let's set up a second model with all predictors. Like before, we'll need to use the logistic_reg() and set_engine("glm") commands.

```{r}
glm_model6 <- logistic_reg() %>%
  set_engine("glm")
```

Now let's train it to our data

```{r}
glm_fit6 <- glm_model6 %>% 
          fit(Nausea ~ ., data = cleandata)
glm_fit6
```

Report results using the `glance()` function.

```{r}
glance(glm_fit6)
```

Additional summary data

```{r}
tidy(glm_fit6)
```

Check model performance

```{r}
check_model(glm_fit6$fit)
```

#### 7. Compare the model results for the categorical model with just the main predictor and all predictors

Comparison of `glm_fit5` and `glm_fit6` based on performance of the models

```{r}
compare_performance(glm_fit5, glm_fit6)
```
